name: "sed"
scopeName: "source.sed"
fileTypes: ["sed"]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*(?:\\s|\\/|(?<=!)\\b)
		(?:(?:g|s|mini)?sed)
	(?:$|\\s)
	|
	# Modeline
	(?i:
		# Emacs
		-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
			sed
		(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
		|
		# Vim
		(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
			sed
		(?=\\s|:|$)
	)
"""
patterns: [
	# Interpreter directive
	name:  "comment.line.number-sign.hashbang.source.sed"
	begin: "\\A#!"
	end:   "$"
	beginCaptures:
		0: name: "punctuation.definition.comment.source.sed"
	
	# Remainder of grammar
	{include: "#main"}
]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#substitution"}
			{include: "#transliteration"}
			{include: "#insertion"}
			{include: "#addresses"}
			{include: "#semicolon"}
			{include: "#braces"}
			{include: "#commands"}
		]
	
	# Stuff to limit execution to certain lines
	addresses:
		patterns: [{
			# Numbered range of lines
			name:  "meta.address.numbered.range.source.sed"
			match: "([0-9]+)\\s*(,)\\s*([0-9]+)(?:\\s*(!))?"
			captures:
				1: name: "constant.numeric.integer.start-index.source.sed"
				2: name: "keyword.operator.address.range.comma.source.sed"
				3: name: "constant.numeric.integer.end-index.source.sed"
				4: name: "keyword.operator.logical.not.negation.source.sed"
		},{
			# GNU: Skip line range
			name:  "meta.address.numbered.range.step.gnu.source.sed"
			match: "([0-9]+)\\s*(~)\\s*([0-9]+)(?:\\s*(!))?"
			captures:
				1: name: "constant.numeric.integer.start-index.source.sed"
				2: name: "keyword.operator.address.range.tilde.gnu.source.sed"
				3: name: "constant.numeric.integer.step-size.source.sed"
				4: name: "keyword.operator.logical.not.negation.source.sed"
		},{
			# Specific line
			name:  "meta.address.numbered.source.sed"
			match: "([0-9]+)(?:\\s*(!))?"
			captures:
				1: name: "constant.numeric.integer.line-index.source.sed"
				2: name: "keyword.operator.logical.not.negation.source.sed"
		},{
			# $
			name: "meta.address.last-line.source.sed"
			match: "\\$"
			captures:
				0: name: "constant.language.anchor.last-line.source.sed"
		},{
			# /regexp/
			name:  "meta.address.pattern.source.sed"
			begin: "/"
			end:   "(/)([IM]*)(?:\\s*(!))?|$"
			beginCaptures:
				0: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "meta.flags.source.sed", patterns: [include: "#flags"]
				3: name: "keyword.operator.logical.not.negation.source.sed"
			contentName: "string.regexp.address.source.sed"
			patterns: [include: "#regexp"]
		},{
			# \%regexp%
			name: "meta.address.pattern.custom-delimiter.source.sed"
			begin: "\\\\(.)"
			end:   "(\\1)([IM]*)(?:\\s*(!))?|$"
			beginCaptures:
				0: name: "punctuation.delimiter.address.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.address.end.source.sed"
				2: name: "meta.modifier.flags.source.sed", patterns: [include: "#flags"]
				3: name: "keyword.operator.logical.not.negation.source.sed"
			contentName: "string.regexp.address.source.sed"
			patterns: [include: "#regexp"]
		},{
			# Address range denoted by a separating comma
			match: "(,)(\\s*(?:(\\+)|(~)))?\\s*([0-9]*)(?:\\s*(!))?"
			captures:
				1: name: "keyword.operator.address.range.comma.source.sed"
				2: name: "meta.address.range.nth-line.gnu.source.sed"
				3: name: "keyword.operator.arithmetic.plus.gnu.source.sed"
				4: name: "keyword.operator.arithmetic.tilde.gnu.source.sed"
				5: name: "constant.numeric.integer.line-index.source.sed"
				6: name: "keyword.operator.logical.not.negation.source.sed"
		}]
	
	
	# { commandsâ€¦ }
	braces:
		name:  "meta.group.source.sed"
		begin: "{"
		end:   "}"
		beginCaptures: 0: name: "punctuation.section.scope.begin.source.sed"
		endCaptures:   0: name: "punctuation.section.scope.end.source.sed"
		patterns: [include: "#main"]
	
	
	# Single-letter commands
	commands:
		patterns: [
			{match: "[Dd]", name: "keyword.control.delete.command.source.sed"}
			{match: "[Pp]", name: "keyword.control.print.command.source.sed"}
			{match: "[Hh]", name: "keyword.control.replace-hold.command.source.sed"}
			{match: "[Gg]", name: "keyword.control.replace-pattern.command.source.sed"}
			{match: "x",    name: "keyword.control.exchange.command.source.sed"}
			{match: "F",    name: "keyword.control.print.filename.gnu.source.sed"}
			{match: "n",    name: "keyword.control.skip.command.source.sed"}
			{match: "N",    name: "keyword.control.print.newline.source.sed"}
			{match: "=",    name: "keyword.control.print.line-number.source.sed"}
			{match: "z",    name: "keyword.control.zap.gnu.source.sed"}
			{
				# Print pattern space unambiguously
				match: "(l)(?:\\s*([0-9]+))?"
				captures:
					1: name: "keyword.control.print.unambiguously.source.sed"
					2: name: "variable.parameter.line-length.gnu.source.sed"
			},{
				# Quit sed with optional exit status
				match: "(?:(q)|(Q))(?:\\s*([0-9]+))?"
				captures:
					1: name: "keyword.control.quit.command.source.sed"
					2: name: "keyword.control.quit.silently.command.gnu.source.sed"
					3: name: "variable.parameter.exit-code.gnu.source.sed"
			},{
				# Read contents of file
				match: "(?:(r)|(R))\\s*(\\S.*)$"
				captures:
					1: name: "keyword.control.read.file.command.source.sed"
					2: name: "keyword.control.read.file.line.command.gnu.source.sed"
					3: name: "string.unquoted.filename.source.sed"
			},{
				# Write to filename
				match: "(?:(w)|(W))\\s*(\\S.*)$"
				captures:
					1: name: "keyword.control.write.file.command.source.sed"
					2: name: "keyword.control.write.file.command.gnu.source.sed"
					3: name: "string.unquoted.filename.source.sed"
			},{
				# Define location of label for branching
				name:  "meta.label.source.sed"
				match: "(:)\\s*([^\\s;#}]+)"
				captures:
					1: name: "storage.type.function.label.source.sed"
					2: name: "entity.name.function.label.source.sed"
			},{
				# Branch to label
				name:  "meta.branch.source.sed"
				match: "(?:([bt])|(T))(?:\\s*([^\\s;#}]+))?"
				captures:
					1: name: "keyword.control.branch.source.sed"
					2: name: "keyword.control.branch.inverse.gnu.source.sed"
					3: name: "entity.name.function.label.source.sed"
			},{
				# GNU: Execute command in shell
				name:  "meta.execution.source.sed"
				begin: "(e)\\s*"
				end:   "$"
				contentName: "string.unquoted.herestring.source.sed"
				beginCaptures:
					1: name: "keyword.control.execute.source.sed"
				patterns: [include: "#escape"]
			},{
				# GNU: Require extensions or version
				match: "(v)(?:\\s*([^\\s;#}]+))?"
				captures:
					1: name: "keyword.control.version.gnu.source.sed"
					2: name: "constant.other.version-string.source.sed"
			}
		]
	
	
	# Lines beginning with a number-sign
	comment:
		patterns: [{
			# Special "directive" to force use of the `-n` switch
			begin: "\\A(#)n"
			end:   "$"
			beginCaptures:
				0: name: "keyword.control.directive.no-autoprint.source.sed"
				1: name: "punctuation.definition.directive.source.sed"
			contentName: "comment.line.number-sign.source.sed"
		},{
			# Ordinary comments like this one
			name:  "comment.line.number-sign.source.sed"
			begin: "#"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.source.sed"
		}]


	# Backslash-escaped character
	escape:
		patterns: [{
			# Escaped newline
			name:  "constant.character.escape.newline.source.sed"
			begin: "\\\\$\\s*"
			end:   "^"
		},{
			# Tab
			name:  "constant.character.tab.source.sed"
			match: "\\\\t"
		},{
			# Literal newline
			name:  "constant.character.newline.source.sed"
			match: "\\\\n"
		},{
			# Anything else
			name:  "constant.character.escape.source.sed"
			match: "\\\\."
		}]


	# a, i, and c
	insertion:
		patterns: [{
			name:  "meta.insertion.source.sed"
			begin: "[aic](\\\\)$\\s*"
			end:   "$"
			contentName: "string.unquoted.herestring.source.sed"
			beginCaptures:
				0: name: "keyword.control.insertion.command.source.sed"
				1: name: "constant.character.escape.newline.source.sed"
			patterns: [include: "#escape"]
		},{
			# GNU: Single-line form
			name:  "meta.insertion.gnu.source.sed"
			begin: "[aic]"
			end:   "$"
			beginCaptures:
				0: name: "keyword.control.insertion.command.source.sed"
			patterns: [include: "#escape"]
		}]


	# Regular expressions
	regexp:
		patterns: [
			# There's no fully reliable *and* consistent way of scoping these characters.
			# Because of syntax conflicts between basic (BRE) and extended (ERE) expressions,
			# a sequence like `\(` might be a group (if BRE), or an escaped/literal bracket
			# if ERE. There's no way of knowing which flavour is in use from a grammar, so
			# our best bet is to just assume. Nice, huh?
			{match: "\\.",      name: "constant.language.wildcard.dot.match.any.source.sed"}
			{match: "\\^",      name: "constant.language.anchor.line-start.source.sed"}
			{match: "\\$",      name: "constant.language.anchor.line-end.source.sed"}
			{match: "\\*",      name: "constant.language.quantifier.min-0.source.sed"}
			{match: "\\\\?\\+", name: "constant.language.quantifier.min-1.source.sed"}
			{match: "\\\\?\\?", name: "constant.language.quantifier.max-1.source.sed"}
			{match: "\\\\?\\|", name: "constant.language.alternation.disjunction.source.sed"}
			{match: "\\\\?\\(", name: "constant.language.group.begin.source.sed"}
			{match: "\\\\?\\)", name: "constant.language.group.end.source.sed"}
			{include: "#reference"}
			{include: "#regexp.miscEscapes"}
			{include: "#regexp.quantiferRanges"}
			{include: "#regexp.bracketExpression"}
			{include: "#regexp.gnuCharacterEscapes"}
			{include: "#regexp.gnuEscapes"}
			{include: "#escape"}
		]

	# Bracket expression: [^a-f\d]
	"regexp.bracketExpression":
		name: "string.regexp.character-class.source.sed"
		begin: "\\["
		end:   "\\]|(?=$)"
		beginCaptures: 0: name: "punctuation.definition.character-class.begin.source.sed"
		endCaptures:   0: name: "punctuation.definition.character-class.end.source.sed"
		patterns: [{
			# Negation
			name: "keyword.operator.logical.not.source.sed"
			match: "\\G\\^"
		},{
			# Ignore a closing bracket if it's listed first
			match: "\\G\\]"
		},{
			# Dash separating two halves of a range expression
			name: "punctuation.separator.range.dash.source.sed"
			match: "(?<!\\G)-(?!$|\\])"
		},{
			# Named character classes [:alnum:]
			name:  "constant.language.named.character-class.source.sed"
			match: "(\\[:)(?:(alnum|alpha|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit)|(.*?))(\\:])"
			captures:
				1: name: "punctuation.definition.character-class.begin.source.sed"
				2: name: "support.constant.posix-class.source.sed"
				3: name: "invalid.illegal.unknown.character-class.source.sed"
				4: name: "punctuation.definition.character-class.end.source.sed"
		},{
			# Collating symbol
			name:  "constant.language.collating-symbol.source.sed"
			begin: "\\[\\."
			end:   "\\.\\]|(?=$)"
			beginCaptures: 0: name: "punctuation.definition.collating-symbol.begin.source.sed"
			endCaptures:   0: name: "punctuation.definition.collating-symbol.end.source.sed"
			patterns: [include: "#escape"]
		},{
			# Equivalence class
			name:  "constant.language.equivalence-class.source.sed"
			begin: "\\[="
			end:   "=\\]"
			beginCaptures: 0: name: "punctuation.definition.equivalence-class.begin.source.sed"
			endCaptures:   0: name: "punctuation.definition.equivalence-class.end.source.sed"
			patterns: [include: "#escape"]
		}, include: "#escape"]

	"regexp.gnuCharacterEscapes":
		patterns: [
			{match: "\\\\a",  name: "constant.character.escape.alert.gnu.source.sed"}
			{match: "\\\\f",  name: "constant.character.escape.form-feed.gnu.source.sed"}
			{match: "\\\\r",  name: "constant.character.escape.carriage-return.gnu.source.sed"}
			{match: "\\\\t",  name: "constant.character.escape.tab.gnu.source.sed"}
			{match: "\\\\v",  name: "constant.character.escape.vertical-tab.gnu.source.sed"}
			{match: "\\\\c.", name: "constant.character.escape.control-x.gnu.source.sed"}
			{match: "\\\\d[0-9]{3}", name: "constant.character.escape.decimal.codepoint.gnu.source.sed"}
			{match: "\\\\o[0-7]{3}", name: "constant.character.escape.octal.codepoint.gnu.source.sed"}
			{match: "\\\\x[0-9A-Fa-f]{2}", name: "constant.character.escape.hex.codepoint.gnu.source.sed"}
		]

	"regexp.gnuEscapes":
		patterns: [
			{match: "\\\\[Ll]", name: "keyword.operator.lowercase.conversion.gnu.source.sed"}
			{match: "\\\\[Uu]", name: "keyword.operator.uppercase.conversion.gnu.source.sed"}
			{match: "\\\\E",    name: "keyword.operator.end.conversion.gnu.source.sed"}
			{match: "\\\\w",    name: "constant.language.word-character.gnu.source.sed"}
			{match: "\\\\W",    name: "constant.language.word-character.negated.gnu.source.sed"}
			{match: "\\\\b",    name: "constant.language.word-boundary.gnu.source.sed"}
			{match: "\\\\B",    name: "constant.language.word-boundary.negated.gnu.source.sed"}
			{match: "\\\\s",    name: "constant.language.whitespace-character.gnu.source.sed"}
			{match: "\\\\S",    name: "constant.language.whitespace-character.negated.gnu.source.sed"}
			{match: "\\\\<",    name: "constant.language.anchor.beginning-of-word.gnu.source.sed"}
			{match: "\\\\>",    name: "constant.language.anchor.end-of-word.gnu.source.sed"}
			{match: "\\\\`",    name: "constant.language.anchor.start-of-pattern.gnu.source.sed"}
			{match: "\\\\'",    name: "constant.language.anchor.end-of-pattern.gnu.source.sed"}
		]

	"regexp.miscEscapes":
		patterns: [
			{match: "\\\\\\$", name: "constant.character.escape.dollar-sign.source.sed"}
			{match: "\\\\\\*", name: "constant.character.escape.asterisk.source.sed"}
			{match: "\\\\\\.", name: "constant.character.escape.dot.period.source.sed"}
			{match: "\\\\\\[", name: "constant.character.escape.square.bracket.source.sed"}
			{match: "\\\\{2}", name: "constant.character.escape.backslash.source.sed"}
			{match: "\\\\\\^", name: "constant.character.escape.caret.source.sed"}
		]

	"regexp.quantiferRanges":
		patterns: [{
			name:  "meta.escaped.quantifier.specific.range.source.sed"
			match: "(\\\\{)([0-9]+)(?:(,)([0-9]+)?)?(\\\\})"
			captures:
				1: name: "punctuation.definition.quantifier.bracket.curly.begin.source.sed"
				2: name: "constant.numeric.integer.source.sed"
				3: name: "punctuation.separator.range.comma.source.sed"
				4: name: "constant.numeric.integer.source.sed"
				5: name: "punctuation.definition.quantifier.bracket.curly.end.source.sed"
		},{
			name:  "meta.unescaped.quantifier.specific.range.source.sed"
			match: "({)([0-9]+)(?:(,)([0-9]+)?)?(})"
			captures:
				1: name: "punctuation.definition.quantifier.bracket.curly.begin.source.sed"
				2: name: "constant.numeric.integer.source.sed"
				3: name: "punctuation.separator.range.comma.source.sed"
				4: name: "constant.numeric.integer.source.sed"
				5: name: "punctuation.definition.quantifier.bracket.curly.end.source.sed"
		}]


	# Backreference to a capturing group: \1 â€¦ \9
	reference:
		name: "variable.language.reference.source.sed"
		match: "\\\\[0-9]"

	
	# Command ; separator
	semicolon:
		name: "punctuation.terminator.statement.semicolon.source.sed"
		match: ";"
		

	# s/ â€¦ / â€¦ /
	substitution:
		patterns: [{
			# Idiotic delimiter #1: Number-signs
			name: "meta.substitution.pound-delimiter.source.sed"
			begin: "(s)(#)"
			end:   "(#)([^;#}]*+)|(?=$|[;#}])"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "meta.options.source.sed", patterns: [include: "#flags"]
			patterns: [{
				name:  "meta.match-pattern.source.sed"
				begin: "\\G"
				end:   "#|(?=$)"
				contentName: "string.regexp.substitution.search.source.sed"
				endCaptures:
					0: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#regexp"]
			},{
				name:  "meta.replacement.source.sed"
				begin: "(?<=#)"
				end:   "(?!\\G)(?=#)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				patterns: [include: "#replacement.innards"]
			}, include: "#escape"]
		},{
			# Idiotic delimiter #2: Semicolons
			name: "meta.substitution.semicolon-delimiter.source.sed"
			begin: "(s)(;)"
			end:   "(;)([^;#}]*+)|(?=$|[;#}])"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "meta.options.source.sed", patterns: [include: "#flags"]
			patterns: [{
				name:  "meta.match-pattern.source.sed"
				begin: "\\G"
				end:   ";|(?=$)"
				contentName: "string.regexp.substitution.search.source.sed"
				endCaptures:
					0: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#regexp"]
			},{
				name:  "meta.replacement.source.sed"
				begin: "(?<=;)"
				end:   "(?!\\G)(?=;)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				patterns: [include: "#replacement.innards"]
			}, include: "#escape"]
		},{
			# Idiotic delimiter #3: Closing braces
			name: "meta.substitution.brace-delimiter.source.sed"
			begin: "(s)(})"
			end:   "(})([^;#}]*+)|(?=$|[;#}])"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "meta.options.source.sed", patterns: [include: "#flags"]
			patterns: [{
				name:  "meta.match-pattern.source.sed"
				begin: "\\G"
				end:   "}|(?=$)"
				contentName: "string.regexp.substitution.search.source.sed"
				endCaptures:
					0: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#regexp"]
			},{
				name:  "meta.replacement.source.sed"
				begin: "(?<=})"
				end:   "(?!\\G)(?=})|(?=$)"
				contentName: "string.quoted.double.source.sed"
				patterns: [include: "#replacement.innards"]
			}, include: "#escape"]
		},{
			# Using a sane delimiter
			name:  "meta.substitution.source.sed"
			begin: "s"
			end:   "$|(?<=^)|(?=[;#}])"
			beginCaptures:
				0: name: "keyword.control.command.source.sed"
			patterns: [{
				name:  "meta.match-pattern.source.sed"
				begin: "\\G(.)"
				end:   "-?(?=\\1|$)"
				contentName: "string.regexp.substitution.search.source.sed"
				beginCaptures:
					1: name: "punctuation.delimiter.pattern.begin.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#regexp"]
			},{
				name:  "meta.replacement.source.sed"
				begin: "([^;#}])"
				end:   "(\\1)([^;#}]*+)|(?=$|[;#}])"
				contentName: "string.quoted.double.source.sed"
				beginCaptures:
					1: name: "punctuation.delimiter.pattern.middle.source.sed"
				endCaptures:
					1: name: "punctuation.delimiter.pattern.end.source.sed"
					2: name: "meta.options.source.sed", patterns: [include: "#flags"]
				patterns: [include: "#replacement.innards"]
			}]
		}]

	"replacement.innards":
		patterns: [
			{match: "&",         name: "variable.language.input.source.sed"}
			{include: "#reference"}
			{include: "#escape"}
		]


	# y/ â€¦ / â€¦ /
	transliteration:
		patterns: [{
			# Idiotic/invalid use of whitespace delimiters
			name:  "invalid.illegal.syntax.transliteration.source.sed"
			match: "y {2}[^ ]*(?: |$)|y\\t{2}[^\\t]*(?:\\t|$)"
		},{
			# Absurd delimiter #1: Space
			name:  "meta.transliteration.space-delimiter.source.sed"
			begin: "(y)( )"
			end:   "( )([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.whitespace.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.whitespace.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "(-)?( )|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.whitespace.middle.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<= )"
				end:   "(?!\\G)-?(?= )|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}, include: "#escape"]
		},{
			# Absurd delimiter #2: Tab
			name:  "meta.transliteration.tab-delimiter.source.sed"
			begin: "(y)(\\t)"
			end:   "(\\t)([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.whitespace.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.whitespace.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "(-)?(\\t)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.whitespace.middle.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<=\\t)"
				end:   "(?!\\G)-?(?=\\t)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}, include: "#escape"]
		},{
			# Absurd delimiter #3: Semicolon
			name:  "meta.transliteration.semicolon-delimiter.source.sed"
			begin: "(y)(;)"
			end:   "(;)([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "(-)?(;)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<=;)"
				end:   "(?!\\G)-?(?=;)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}, include: "#escape"]
		},{
			# Absurd delimiter #4: Closing brace
			name:  "meta.transliteration.brace-delimiter.source.sed"
			begin: "(y)(})"
			end:   "(})([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "(-)?(})|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<=})"
				end:   "(?!\\G)-?(?=})|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}, include: "#escape"]
		},{
			# Absurd delimiter #5: Pounds/number-signs
			name:  "meta.transliteration.pound-delimiter.source.sed"
			begin: "(y)(#)"
			end:   "(#)([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "(-)?(#)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<=#)"
				end:   "(?!\\G)-?(?=#)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}, include: "#escape"]
		},{
			# Absurd delimiter #6: Dash
			name:  "meta.transliteration.dash-delimiter.source.sed"
			begin: "(y)(-)"
			end:   "(-)([^#;}]*)|$"
			beginCaptures:
				1: name: "keyword.control.command.source.sed"
				2: name: "punctuation.delimiter.pattern.begin.source.sed"
			endCaptures:
				1: name: "punctuation.delimiter.pattern.end.source.sed"
				2: name: "invalid.illegal.extra-characters.source.sed"
			patterns: [{
				# First range
				name:  "meta.source-characters.source.sed"
				begin: "\\G"
				end:   "-|(?=$)"
				contentName: "string.quoted.double.source.sed"
				endCaptures:
					0: name: "punctuation.delimiter.pattern.middle.source.sed"
				patterns: [include: "#escape"]
			},{
				# Second range
				name:  "meta.replacement-characters.source.sed"
				begin: "(?<=-)"
				end:   "(?=$|-)"
				contentName: "string.quoted.double.source.sed"
				patterns: [include: "#escape"]
			}, include: "#escape"]
		},{
			# Using a sane delimiter
			name:  "meta.transliteration.source.sed"
			begin: "y"
			end:   "$|(?=[\\s#;}])|(?<=^)"
			beginCaptures:
				0: name: "keyword.control.command.source.sed"
			patterns: [{
				# First range
				name:  "meta.source-characters.source.sed"
				begin: "\\G(.)"
				end:   "-?(?=\\1|$)"
				contentName: "string.quoted.double.source.sed"
				beginCaptures:
					1: name: "punctuation.delimiter.pattern.begin.source.sed"
				endCaptures:
					0: name: "string.quoted.double.source.sed"
				patterns: [include: "#transliteration.ranges"]
			},{
				# Second range
				name:  "meta.replacement-characters.source.sed"
				begin: "(.)"
				end:   "(-)?(\\1)([^#;}]*+)|(?=$)"
				contentName: "string.quoted.double.source.sed"
				beginCaptures:
					1: name: "punctuation.delimiter.pattern.middle.source.sed"
				endCaptures:
					1: name: "string.quoted.double.source.sed"
					2: name: "punctuation.delimiter.pattern.end.source.sed"
					3: name: "invalid.illegal.extra-characters.source.sed"
				patterns: [include: "#transliteration.ranges"]
			}]
		}]

	"transliteration.ranges":
		patterns: [
			{match: "\\G-"}
			{match: "-", name: "keyword.operator.range.dash.source.sed"}
			{include: "#escape"}
		]


	# Modifiers for the substitute command
	flags:
		patterns: [
			# Standard flags
			{match: "g",      name: "keyword.operator.modifier.global.source.sed"}
			{match: "p",      name: "keyword.operator.modifier.print.source.sed"}
			{match: "[0-9]+", name: "keyword.operator.modifier.limit-match.source.sed"}
			
			# Write output to file
			match: "(w)\\s*([^;#}]*)"
			captures:
				1: name: "keyword.operator.modifier.write.file.source.sed"
				2: name: "string.unquoted.filename.source.sed"
			
			# GNU extensions
			{match: "e",      name: "keyword.operator.modifier.exec-shell.gnu.source.sed"}
			{match: "I|i",    name: "keyword.operator.modifier.ignore-case.gnu.source.sed"}
			{match: "M|m",    name: "keyword.operator.modifier.multi-line.gnu.source.sed"}
			
			# Mark everything else as an error unless it's a valid terminal
			name: "invalid.illegal.unknown.flag.source.sed"
			match: "[^;\\s#}gp0-9eIiMm]+"
		]
